
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BASICS 					BASICS 					BASICS 					BASICS 					BASICS 					BASICS 					BASICS 	

<side note how to use>

flash('Text', 'danger/success')       #after flash you either redirect or render_template 
return render_template('file.html')   #templates/file.html 
return redirect(url_for('home'))      #home is the name of the function, def home(): template home.html 

</side note !how to use>
				
pip install flask

from flask import Flask, render_template, url_for, redirect, flash

app = Flask(__name__)
app.config['SECRET_KEY'] = 'random giberish'

@app.route('/home')                           # page/home.html  
@app.route('/')								  # page 
def home():
	return render_template('home.html', title='Home Page')       #you can add variables as arguments
																 #than you can access {{ title }} inside the template

if __name__ == '__main__':
    app.run(debug=True)
	
	
	
BASICTS 					BASICTS 					BASICTS 					BASICTS 					BASICTS 					BASICTS 					BASICTS 					
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FORMS						FORMS						FORMS						FORMS						FORMS						FORMS						FORMS						

	
																 																		form.py
pip install flask-wtf
																																		
from flask_wtf import FlaskForm 
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import DataRequired, Email, Length, EqualTo

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2,max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    submit = SubmitField('Sign Up')

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember = BooleanField('Remember Me')
    submit = SubmitField('Login')
																																		main.py
																																		
from form import RegistrationForm, LoginForm

@app.route('/login', methods=['POST', 'GET'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        if form.email.data == 'a@a.com' and form.password.data == 'p':                                            #fake login
            flash('You have been logged in!', 'success')
            return redirect(url_for('home'))
        else: 
            flash('Login Unsuccessful. Please check username and password', 'danger')
    return render_template('login.html', title='Login', form=form)

@app.route('/register', methods=['POST', 'GET'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        flash(f'Account created for {form.username.data}!', 'success')
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)


register.html
{% extends 'layout.html' %}
{% block content %}
	<div class='content-section'>
        <form method='POST' action=''>
		
            {{form.hidden_tag()}}                                                              #this is linked with the secret key
			
            <fieldset class='form-group'>
                <legend class='border-bottom mb-4'>Join Today</legend>
                <div class='form-group'>
                    {{form.username.label(class='form-control-label')}}

                    {% if form.username.errors %}                                         		#all 'usernames' can be changed to the class inputs
                        {{form.username(class='form-control form-control-lg is-invalid')}}		#for example, password, confirm_password or email
                        <div class='invalid-feedback'>
                            {% for error in form.username.errors %}
                                <span> {{error}} </span>
                            {% endfor %}
                        </div>
                    {% else %}
                        {{form.username(class='form-control form-control-lg')}}
                    {% endif %}
				
                </div>
			</fieldset>
			<div class='form-group'>
                {{form.submit(class='btn btn-outline-info')}}
            </div>
        </form>
    </div>
	<div class='border-top pt-3'>
        <small class='text-muted'>
            Already Have An Account? <a  class='ml-2' href='{{url_for("login")}}'>Sign In</a> 
        </small>
    </div>
{% endblock content %}
	


login.html
	
{% extends 'layout.html' %}
{% block content %}
    <div class='content-section'>
        <form method='post' action=''>
            {{form.hidden_tag()}}
            <fieldset class='form-group'>
                <legend class='border-bottom mb-4'>Login</legend>
                <div class='form-group'>
                    {{form.email.label(class='form-control-label')}}

                    {% if form.email.errors %}
                        {{form.email(class='form-control form-control-lg is-invalid')}}
                        <div class='invalid-feedback'>
                            {% for error in form.email.errors %}
                                <span> {{error}} </span>
                            {% endfor %}
                        </div>
                    {% else %}    
                        {{form.email(class='form-control form-control-lg')}}
                    {% endif %}
                </div>
				
                <small class='text-muted ml-2'>
                    <a href='#'>
                        Forgot Password?
                    </a>
                </small>
				
            </fieldset>
			<div class='form-group'>
                {{form.submit(class='btn btn-outline-info')}}
            </div>
        </form>
    </div>
    <div class='border-top pt-3'>
        <small class='text-muted'>
            Need An Account? <a  class='ml-2' href='{{url_for("register")}}'>Sign Up Now</a>
        </small>
    </div>
{% endblock content %}

																																		layout.html, before the block content
{% with messages = get_flashed_messages(with_categories=true) %}
	{% if messages %}
	  {% for category, message in messages %}
		<div class="alert alert-{{ category }}">
		  {{ message }}
		</div>
	  {% endfor %}
	{% endif %}
{% endwith %}
	

FORMS			FORMS			FORMS			FORMS			FORMS			FORMS			FORMS			FORMS			FORMS			FORMS			FORMS			FORMS				
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		
from flask_sqlalchemy import SQLAlchemy
pip install flask-sqlalchemy

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
db = SQLAlchemy(app)
	
	
class User(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    username = db.Column(db.String(20), nullable=False, unique=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default='default.jpg')
    password = db.Column(db.String(60), nullable=False)
    posts = db.relationship('Post', backref='author', lazy=True)
	#this is not a column, Post is the actual class, backref is what we will call it

    def __repr__(self):
        return f"User('{self.username}'), ('{self.email}'), ('{self.image_file}')"

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)				#from datetime import datetime
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)					#a foreign key needs the name of the table, lowercase
    
    def __repr__(self):
        return f"User('{self.title}'), ('{self.date_posted}')"

		
>>CONSOLE
from flaskblog import db 
db.create_all()          

from flaskblog import User, Post        	#the classes 
user_1 = User(username='John', email='JohnDoe@example.com', password='password')
user_2 = User(username='John2', email='JohnDoe2@example.com', password='password2')
db.session.add(user_1) 						#cannot add all as in git, now in staged area 
db.session.commit() 						#commited area,
User.query.all()							#return a list with all the 'users'
User.query.get(1) 							#1 is the id, the primary key
User.query.first()							#return only the first instance created
User.query.filter_by(username='John').all()	#return the list with all the filtered users 
user = User.query.filter_by(username='John').first()
print user                            		#prints the instance 

print user.posts  >> []						#user has no posts linked with it
print user.id 	  >> 1
post_1 = Post(title='Blog 1', content='First Post Content!', user_id=user.id)
post_2 = Post(title='Blog 2', content='Second Post Content!', user_id=user.id)
db.session.add(post_1)
db.session.add(post_2)
db.session.commit()
user.posts 		  >> #list with the posts that has: a title, dateposted like we specified in the __repr__ method 
post = Post.query.first()					#it has the first post created 
post.user_id  	  >>1 						#user_id has been linked as a foreign key 
post.author       >>User('John', 'JohnDoe@example', 'default.jpg')    author as a backref is the user, 
	
	
db.drop_all()								#deletes all THIS SHIT 
db.create_all()
User.query.all()  >> []
Post.query.all()  >> []


DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		DATABASE 		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTUR		STRUCTUR		STRUCTUR		
	
	
To this point the structure of the files looked like this:
THIS IS A MODULE

 |-->static  		-->		main.css
 |	
 |-->templates -----|-->	home.html 							includes layout.html
 |					|
 |					|--> 	layout.html                        	includes main.css, bootstrap
 |					|
 |					|-->  	login.html 							includes layout.html 
 |					|
 |					|--> 	register.html 						includes layout.html 
 |					|
 |					 --> 	about.html 							includes layout.html
 |					
 |-->flaskblog.py 												includes  flask, render_template, url_for, flash, redirect, form.py, models.py, sqlalchemy.   creates app, initialises app, routes
 |
 |-->models.py													includes flaskblog #this is a circular import
 |
  -->form.py													includes wtforms										creates RegistrationForm, LoginForm
	

THIS IS A PACKAGE 
a package only has a file named __init__.py

|-->flaskblog ------|--> __init__.py							includes flask, sqlalchemy, from flaskblog import routes(import routs after db )    	   				creates app, db
|					|
|					|--> forms.py								includes wtforms
|					|
|					|--> models.py								includes flaskblog.db
|					|
|					|--> routes.py								includes render_template, url_for, flash, redirect, flaskblog.models.py, flaskblog.forms.py, app     	creates routes
|					|
|					|--> site.db
|					|
|					|
|					|--> static ----> main.css
|					|
|					 --> templates ---------------->	home.html 							includes layout.html
|											 	|
|												|--> 	layout.html                        	includes main.css, bootstrap
|												|
|												|-->  	login.html 							includes layout.html 
|												|
|												|--> 	register.html 						includes layout.html 
|												|
|												 --> 	about.html 							includes layout.html
|				
|
 -->run.py														from flaskblog import app(inside __init.py)                   									initialises app
	
	
	
	
	
	
	
	
	
	
STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		STRUCTURE		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			
pip install flash-bcrypt
	
	
from flask_bcrypt import Bcrypt 
bcrypt = Bcrypt()
bcrypt.generate_password_hash('testing')
>> b'2938j*rj2098j389j)*j30*J)(J(#)3094043'												#the b in the begining means it is in bytes
hashed_pw = bcrypt.generate_password_hash('testing').decode('utf-8')
>> '2938j*rj2098j389j)*j30*J)(J(#)3094043'												# now its just a string
bcrypt.check_password_hash(hashed_pw, 'password')
>> False 
bcrypt.check_password_hash(hashed_pw, 'testing')
>> True 


HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			HASHING PASSWORDS			
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				
	
__init__.py
from flask_bcrypt import Bcrypt 
bcrypt = Bcrypt(app)
	
routes.py 
from flaskblog import app, db, bcrypt

def register()
	if form.validate_on_submit():
		hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
		user = User(username=form.username.data, email=form.email.data, password=hashed_password)
		db.session.add(user)
		db.session.commit()
		flash('Account created', 'success')
		return redirect(url_for('login'))
	return render_template('register.html', title='Register', form=form)
		
forms.py 
from flaskblog.models import User
from wtforms.validators import ValidationError

class RegistrationForm():
	....
	....
	
	#def validate_field(self, field):
	#	if True:
	#		raise ValidationError('Validation Message')
	# VALIDATION ERROR TEMPLATE
	
	def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('That username is taken. Please choose a different one')
	#almost same for email

	
DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				DUPLICATE USERS				
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
USER LOGIN 					USER LOGIN 					USER LOGIN 					USER LOGIN 					USER LOGIN 					USER LOGIN 					USER LOGIN 	


				
pip install flask-login	
__init__.py 
from flask_login import LoginManager
login_manager = LoginManager(app)

models.py 
from flaskblog import db, login_manager 
from flask_login import UserMixin

class user(db.Model, UserMixin):            # beware if the UserMixin here!!!
	.......

@login_manager.user_loader
def load_user(user_id):
	return User.query.get(int(user_id))
	
routes.py 
from flask_login import login_user, current_user, logout_user

def login():
	if current_user.is_authenticated:
		return redirect(url_for('home'))
	form = LoginForm()
	if form.validate_on_submit():          #overwrite
		user = User.query.filter_by(email=form.email.data).first()
		if user and bcrypt.check_password_hash(user.password, form.password.data):
			login_user(user, remember=form.remember.data)
			return redirect(url_for('home'))
		else:
			flash('Login Unsuccessful..., 'danger')
	return render_template('login....', title='Login', form=form)
	
def register():
	if current_user.is_authenticated:
		return redirect(url_for('home'))
	form = ...
	....
	
USER LOGIN 					USER LOGIN 					USER LOGIN 					USER LOGIN 					USER LOGIN 					USER LOGIN 					USER LOGIN 					
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
USER LOGOUT					USER LOGOUT					USER LOGOUT					USER LOGOUT					USER LOGOUT					USER LOGOUT					USER LOGOUT					

@app.route('/logout')
def logout():
	logout_user()
	return redirect(url_for('home'))
	
	
layout.html
......
<div class='navbar-nav'>
	{% if current_user.is_authenticated %}
		<a href='{{url_for("logout") }}'> Log out </a>
	{% else %}
		<a href='{{url_for("login") }}'> Log In </a>
		<a href='{{url_for("register") }}'> Sign Up </a>
	{% endif %}
</div>

USER LOGOUT					USER LOGOUT					USER LOGOUT					USER LOGOUT					USER LOGOUT					USER LOGOUT					USER LOGOUT					
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			

routes.py
....
@app.route('/account')
def account():
	return render_template('account.html', title='Account') 		#current_user.username inside the content block, create it

layout.html
......
<div class='navbar-nav'>
	{% if current_user.is_authenticated %}
		<a class="nav-item nav-link" href='{{url_for("logout") }}'> Log out </a>
		<a class="nav-item nav-link" href='{{url_for("account") }}'> Account </a>
......

routes.py
from flask_login import login_required 
.....

@app.route('/account')
@login_required 
def account():
	....

__init__.py
....
login_manager.login_view = 'login' #function name to where is beeing redirected
login_manager.login_message_category = 'info'

USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			USER ONLY PAGES 			
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
REDIRECTING					REDIRECTING					REDIRECTING					REDIRECTING					REDIRECTING					REDIRECTING					REDIRECTING					 

routes.py
from flask import ..., request 
....

def login():
	....
	if form.validate():
		...
		if user and bcrypt ....:
			login_user
			next_page = request.args.get('next')
			return redirect(next_page) if next_page else redirect(url_for('home'))		#beware of the new redirect link!!!!!
		
	
	
	
REDIRECTING					REDIRECTING					REDIRECTING					REDIRECTING					REDIRECTING					REDIRECTING					REDIRECTING					
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				
	
account.html 

#snipets
#overwrite 
<img class='rounded-circle account-img' src='{{ image_file }}'>
	<h2 class='account-heading'>{{ current_user.username }}</h2>
	<h2 class='account-heading'>{{ current_user.email }}</h2>
	
??inside the static folder add a profile_pics folder(nested) that has default.png 
	
routes.py 
...

def account():
	image_file = url_for('static', filename='profile_pics/' + current_user.image_file)
	return render_template('account.html', image_file=image_file)  							#beware of image_file!!
	
	
	
ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				ACCOUNT PAGE 				
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		

forms.py 
from flask_login import current_user

class UpdateAccountForm(FlaskForm):
	username = ....#as usual
	email = .......#as usual	
	submit = ......#as usual   label=> update

	def validate_username(self, username):
        if username.data != current_user.username:
            user = User.query.filter_by(username=username.data).first()
            if user:
                raise ValidationError('That username is taken. Please choose a different one.')

    def validate_email(self, email):
        if email.data != current_user.email:
            user = User.query.filter_by(email=email.data).first()
            if user:
                raise ValidationError('That email is taken. Please choose a different one.') 
	
	
registration template, copy the form and add it to account.html,  
where it says from here, and modify, delete passwords, change legend
<div class='content-section'>
	#stuff
</div> 
<div class=''>
	Already have an account?
</div>
	
	

routes.py 
from flaskblog.forms import UpdateAccountForm 
....

@app.route('/account', methods=['Get', 'Post')
def account():
	form = UpdateAccountForm()
	if form.validate_on_submit():
		current_user.username = form.username.data 
		current_user.email = form.email.data 
		db.session.commit()
		flash('your account has been updated', 'success')
		return redirect(url_for('account'))
	elif request.method == 'GET':
		form.username.data = current_user.username 
		form.email.data = current_user.email
	imagefile = ....
	return render_template(...., form=form)  #beware of the form!!!

	
UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		UPDATING ACCOUNT PAGE 		
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE			
forms.py 
from flask_wtf.file import FileField, FileAllowed 

class Update...()
	....
	picture = FileField('Update Profile picture', validators=[FileAllowed(['jpg', 'png'])])

	
	
account.html 
....
<form method='Post' action='' enctype='multipart/form-data'>         #beware of the enctype!!!!
		<div class='form-group'>
			{{ form.picture.label() }}
			{{ form.picture(class="form-control-file") }}
			{% if form.picture.errors %}
				{% for error in form.picture.errors %}
					<span class='text-danger'> {{error }} </span></br>
				{% endfor %}
			{% endif %}
		</div>
	</fieldset>
</form>
	
	
routes.py #pip install Pillow
import secrets, os
from PIL import Image
... 

def save_picture(form_picture):
	random_hex = secrets.token_hex(8) #8 bytes 
	_, f_ext = os.path.splitext(form_picture.filename) #within python if you want to throw a name you use a ' _ '
	picture_fn = random_hex + f_ext
	picture_path = os.path.join(app.root_path, 'static/profile_pics', picture_fn)
	
	output_size = (125, 125)
	i = Image.open(form_picture)
	i.thumbnail(output_size)
	
	i.save(picture_path)
	
	return picture_fn
 
def account():
	if form.validate_on_submit():
		if form.picture.data:
			picture_file = save_picture(form.picture.data)
			current_user.image_file = picture_file
		
		....
	
	
	
	
	

UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		UPDATE PICTURE DATABASE		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CREATING POSTS				CREATING POSTS				CREATING POSTS				CREATING POSTS				CREATING POSTS				CREATING POSTS				CREATING POSTS				



forms.py
from wtforms import TextAreaField 
...
class PostForm(FlaskForm):
	title = StringField('Title', validators=[DataRequired()])
	content = TextAreaField('Content', validators=[DataRequired()])
	submit = SubmitField('Post')

routes.py 
from flaskblog.forms import PostForm
....
@app.route('/posts/new', methods=['GET', 'POST'])
@login_required 
def new_post():
	form = PostForm()
	if form.validate_on_submit():
		flash('your post has been created!', 'success')
		return redirect(url_for('home')) 
	return render_template('create_post.html', title='New Post', form=form)
	
create_post.html 
{% extends 'layout.html' %}
{% block content %} #copy content section div from login to create_post, legend to new post, edit form.title.label and form.content.label, 
					#checkbox remember me not needed, delete the forgot password
	
{% endblock content

layout.html 
...
	<a class='nav-item nav-link' href='{{ url_for('new_post' }}> New Post </a>
	<a class='nav-item nav-link' href='{{ url_for('account' }}> Account </a>

routes.py 
....

def new_post():
	if form.validate_on_submit():
		post = Post(title= form.title.data, content=form.content.data, author=current_user)
		db.session.add(post)
		db.session.commit()
		....
		
def home():        #delete the posts dummy data 
	posts = Post.query.all()
	...
	
@app.route('/post/<int:post_id>')  #/post/1 is post_id 1 of type int
def post(post_id):
	post = Post.query.get_or_404(post_id)
	return render_template('post.html', title=post.title, post=post)

home.html 
...
<article>
	<img class='rounded-circe artice-img' src='url_for('static', filename='profile_pics/' + post.author.image_file) }}'>
	...
		<a class='mr-2' href='#'>{{ post.author.username }}</a>
		<small class='text-muted'> {{ post.date_posted.strftime('%Y-%m-%d') }}<small>
		
		<h2><a class='article-title'> href='{{ url_for('post', post_id=post.id) }}> {{post.title }}</a></h2>

	
posts.html 
#from home.html copy paste all
#no need for the 'for loop'
...
<h2 class='article-title'>{{post.title}}</h2>#removed the <a>, added the class
...
	
	
	



CREATING POSTS				CREATING POSTS				CREATING POSTS				CREATING POSTS				CREATING POSTS				CREATING POSTS				CREATING POSTS				
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				
	
routes
from flask import abort
....
@app.route('/post/<int:post_id>/update', methods=['POST', 'GET')
@login_required
def update_post(post_id):
	post = Post.query.get_or_404(post_id)
	if post.author != current_user:
		abort(403)
	form = PostForm()
	if form.validate_on_submit():
		post.title = form.title.data 
		post.content = form.content.data 
		db.session.commit()
		flash('Your post has been updated!', 'success')
		return redirect(url_for('post', post_id=post.id))
	elif request.method == 'GET':
		form.title.data = post.title 
		form.content.data = post.content
	return render_template('create_post.html', title='Update Post', 
						form=form, legend='Update Post')
	
def new_post():
	...
	return render_template(....., legend='New Post')


create_post.py 
	..
	<legend>{{ legend }}</legend>
	
	
UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				UPDATE POSTS				
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				


post.html 
.... 
	<small>
	{% if post.author == current_user %}
		<a class='btn btn-secondary btn-sm mt-1 mb-1' href='{{url_for("update_post", post_id = post.id) }}'>Update</a>
		<button type='button' class='btn btn-danger btn-sm m-1'>Delete</button> #in here add data-toggle and data-target='#deleteModal'
	{% endif %}
	</div> 
	<h2> 
</article> 
		#in here coppy paste from bootstrap all the code from the model, change everywhere where exampleModal to deleteModal(3)
		#change the modal title, Delete Post?, delete the modal body, from save changes(delete it), add this 
		#<form action='{{url_for("delete_post", post_id=post.id)}}' method='post'>
		#<input class='btn btn-danger' type='submit' value='Delete'>

routes.py 
... 

@app.route('/post/<int:post_id>/delete', methods=['GET', 'POST']
@login_required
def delete_post(post_id):
	post = Post.query.get_or_404(post_id)
	if post.author != current_user:
		abort(403)
	db.session.delete(post)
	db.session.commit()
	flash('Your post has been deleted!', 'success')
	return redirect(url_for('home'))
	
	
DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				DELETE POSTS 				
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PAGINATION 					PAGINATION 					PAGINATION 					PAGINATION 					PAGINATION 					PAGINATION 					PAGINATION 					

#create 30 posts 
>> from flaskblog.models import Post 
>>posts = Post.query.all()
>>for post in posts:  print(post)		#get all 30 sample posts 
....

>>posts = Post.query.paginate()
>>posts									#posts is now a pagination object 
>>dir(posts) 							#tells us all the functions and methods to this object 

>>posts.per_page
20										#20 is default 
>>posts.page 				
1
>>for post in posts.items: print(post)  #gets only 20posts
...
>>posts = Post.query.paginate(page=2)
>>for post in posts.items: print(posts) #gets the remaining 10posts
...

>>posts = Post.query.paginate(per_page=5)
>>for post in posts.items: print(posts) #gets 5 values, the first 5 
..

>>posts = Post.query.paginate(per_page=5, page=2)
>>posts.page  							#2
>>for post in posts.items: print(posts) #gets 5 values, the other 5 

>>posts.total
30


routes.py 
...

def home():
	page = request.args.get('page', 1, type=int)   #1 is the default, and error if not int 
	posts = Post.query.paginate(per_page=5, page=page)  #the page is by default 1
	
	
home.html
{% block content %}
	{% for post in posts.items %}
	....
	{% endfor %}
	{% for page_num in posts.iter_pages(left_edge=1, right_edge=1, left_current=1, right_current=2) %}
		{% if page_num %}
		
			{% if posts.page == page_num %}
				<a class='btn btn-info mb-4' href='{{ url_for("home", page=page_num) }}'>{{page_num}}</a>
			{% else %}
				<a class='btn btn-outline-info mb-4' href='{{ url_for("home", page=page_num) }}'>{{page_num}}</a>
			{% endif %}
			
			
		{% else %}
			...
		{% endif %}
	{%endfor %}
{% endblock content %}


PAGINATION 					PAGINATION 					PAGINATION 					PAGINATION 					PAGINATION 					PAGINATION 					PAGINATION 					
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			

routes.py 

def home():
	...
	posts = Post.query.order_by(Post.date_posted.desc()).paginame(page=page, per_page=5)  #date_posted descending 


ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			ORDER BY OLDEST 			
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				

routes.py 
....

...

@app.route('/user/<string:username>')
def user_posts(username):
	page = request.qrgs.get('page, 1, type=int)
	user = User.query.filter_by(username=username).first_or_404()
	posts = Post.query.filter_by(author=user)\
			.order_by(Post.date_posted.desc())\							#spans next line
			.paginate(page=page, per_page=5)
	return render_template('user_posts.html', posts=posts, user=user)

	
user_posts.html
#copy paste home route 
.....
{% block content %}
	<h1 class='mb-3'>Posts by {{user.username}} ({{posts.total}})</h1>
	....
		<div class='article=metadata'>
			<a class='mr-2' href='{{ url_for("user_posts", username=post.author.username) }}'>
	....
	{% if posts.page == page_num %}
		<a class=... href="{{ url_for('user_posts', username=user.username, page=page_num) }}"...
	{% else %}
		<a class=.... href="{{ url_for('user_posts, username=user.username, page=page_num) }}".... 
	...
	
	
home.html 
...
	
	<div class='article=metadata'>
			<a class='mr-2' href='{{ url_for("user_posts", username=post.author.username) }}'> #same 
	
post.html 
...

	<div class='article=metadata'>
			<a class='mr-2' href='{{ url_for("user_posts", username=post.author.username) }}'>

			
ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				ALL POSTS USER				
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 			

>> from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
>> s = Serializer('secret', 30)
>> token = s.dumbs({'user_id': 1}).decode('utf-8')
>> s.loads(token)  #needs to be under 30 of calling, if you wait more than 30 it will expire

models.py
from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
from flaskblog import db, login_manager, app 

class User(db.Model, UserMixin):
	....
	
	def get_reset_toke(self, expires_sec=1800):  #30min 
		s = Serializer(app.config['SECRET_KEY'], expires_sec)
		return s.dumps({'user_id': self.id }).decode('utf-8')
	
	@staticmethod
	def verify_reset_token(token):
		s = Serializer(app.config['SECRET_KEY'])
		try:
			user_id = s.loads(token)['user_id']
		except:
			return None
		return User.query.get(user_id)
	...
	
	
class RequestResetForm(FlaskForm):
	email = SubmitField('Email', validators = [DataRequired(), Email()])
	submit SubmitField('Request Password Reset')
	
	def validate_email(self, email):
		user = User.query.filter_by(email=email.data).first()
		if user is None:
			raise ValidationError('There is no account with that email. You must register first.')

class ResetPasswordForm(FlaskForm):
	password = PasswordField('Password', validators=[DataRequired()])
	confirm_password = PasswordField('Password', validators=[DataRequired(), EqualTo('password')])
	submit SubmitField('Password Reset')


routes.py 
from flaskblog.form import RequestResetForm, ResetPasswordForm 
....


@app.route('/reset_password', methods=['GET', 'POST'])
def reset_request():
	if curren_user.is_authenticated:
		return redirect(url_for('home'))
	form = RequestResetForm() 
	return render_template('reset_request.html', title='Reset Password', form=form)
	
	
reset_request.html 
#copy paste login 
#legend to Reset Password 
#rid of password, form-check remember, keep submit button, remove text of 'forgot password', and need-account get rid of it 
	
	
routes.py 
....

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_token(token):
	if current_user.is_authenticated:
	return redirect(url_for('home'))
	user = User.verify_reset_token(token)
	if user is None:
		flash('That is an invalid or expired token', 'warning')
		return redirect(url_for('reset_reqeust'))
	form = ResetPasswordForm()
	return render_template('reset_token.html', title='Reset Password', form=form)
	
	
reset_token.html 
#copy paster reset_request.html 
#replace email with password and create a new confirm_password group 


routes.py 
...

def send_reset_email(user):
	pass

def reset_reset():
	...
	form = ..
	if form.validate_on_submit():
		user = User.query.filter_by(email=form.email.data).first()
		send_reset_email(user)
		flash('An email has been sent with instructions to reset your password.', 'info')
		return redirect(url_for('login'))
	return render_template('reset_request.html', ....)
	
	
__init__.py 
from flask_mail import Mail 
...

app.config['MAIL_SERVER'] = 'smtp.googlemail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True 
app.config['MAIL_USERNAME'] = 'name@gmail.com'
app.config['MAIL_PASSWORD'] = 'password' #change these
mail = Mail(app)
	
routes.py 
from flaskblog import .., mail
from flask_mail import Message 
..... 
	
def send_reset_email(user):
	token = user.get_reset_token()#default kicks in 
	msg = Message('Password Reset Request', sender = 'noreply@demo.com, recipients=[user.email])   #usually email from your domain or your actual email address
	#multi line string 
	
	msg.body = f'''  To reset your password, visit the following link: 
url_for('reset_token', token=token, _external=True)} /*f_string, variable, and t */ 
		
If you did not make this request then sumply ignore this email and no changes will be made.
'''
	mail.send(msg)
	
def reset_token(token):
	...
	form = ResetpasswordForm()
	if form.validate_on_submit():
		hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
		user.password = hashed_password 
		db.session.commit()
		flash('Password has been updated.', 'success')
		return redirect(url_for('login'))
	return render_template('reset_token.html'....)
	

login.html 
...
<div class='form-group'>
	{{ form.submit(....
	<small class='text-muted ml-2'>
		<a href=' {{url_for('reset_request') }}>
	</small 
</div>
</form>
.....
	
	
PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 		PASSWORD CHANGE MAIL 	PASSWORD CHANGE MAIL 			
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
STURCTURE2					STURCTURE2					STURCTURE2					STURCTURE2					STURCTURE2					STURCTURE2					STURCTURE2					
	
|-->flaskblog ------|--> __init__.py							
|					|
.					.
.					.
.					.
|					|
|					|
|					|--> users --------------------> 	__init__.py #empty
|					|						 	|
|					|							|--> 	routes.py
|					|						 	|
|					|							|--> 	forms.py
|					|						 	|
|					|							 --> 	utils.py
|					|
|					|
|					|
|					|
|					|--> posts -------------------->	__init__.py #empty 
|					|						 	|
|					|							|--> 	routes.py
|					|						 	|
|					|							 --> 	forms.py
|					|
|					|
|					|--> main ---------------------> 	__init__.py  #empty
|					|						 	|
|					|							|--> 	routes.py
|					|						 	|
|					|							 --> 	forms.py
|					|
|					|
.					.
.					.
.					.
|				
|
 -->run.py														                 									
	

	
users/routes.py 
from flask import Blueprint
users = Blueprint('users', __name__)

#from routes.py(original) copy register, login, logout, account, user_posts paste, reset_token, reset_request to user/routes
#from routes.py(original) save_picture, send_reset_email to user-utils
	
#from @app.route change to @users.route

post/routes.py
from flask import Blueprint 
posts = Blueprint('posts', __name__)

#from routes.py(original) copy new_post, post, update_post, delete_post to posts/routes

#from @app.route to @posts.route
	

main/routes.py
from flask import Blueprint 
main = Blueprint('main, __name__)
	
#from routes.py(original) copy home, about to main/routes 
#from @app.route to @main.route



#now the original has only the import 
	
	
users/forms.py
	
from old forms file copy RegistrationForm, LoginForm, UpdateAccountForm, RequestResetForm, ResetPasswordForm to user/forms.py 
	
posts/forms.py 

from old forms file copy PostForm to posts/forms.py
	

	
bluepirnt_import snipet import accordingly 	
delete routes and forms files, the originals


__init__.py

...

mail = Mail(app)

from flaskblog.users.routes import users  #this is the blueprint
from flaskblog.posts.routes import posts  #this is the blueprint
from flaskblog.main.routes import main  #this is the blueprint

app.register_blueprint(users)
app.register_blueprint(posts)
app.register_blueprint(main)


#change all the url_for functions 

#start with find and replace all the url_for with name/file, like: 
layout.html :
 main.home   	Home 
 main	.about 		About 
 posts	.new_post  	New Post 
 users	.account  	Account 
 users	.logout  	Logout 
 users	.login   	Login 
 users	.register   Register

 
__init__.py
....

login_manager.login_view = 'users.login' 
....

#by now website should be running

STURCTURE2					STURCTURE2					STURCTURE2					STURCTURE2					STURCTURE2					STURCTURE2					STURCTURE2					
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				
	
flaskblog/config.py
import os

#from __init__.py copy all that .config and paste here, around 7
#get rid of all app.config['  and '] so just the names are left 
#keep the secret information out of the source code, for example the gmail password and email 
class Config:
	SECRET_KEY =  os.environ.get('SECRET_KEY')                       		#copy them, open the console, in sublime, subl ~/.bash_profile or open manualy if need be
	SQLALCHEMY_DATABASE_URL = os.environ.get('SQLALCHEMY_DATABASE_URI') 	#paste the secret_key and url like this:  export SECRET_KEY='giberish'  
																			#export SQLALCHEMY_DATABASE_URI='sqlite:///site.db'	
																			#do the same for the email/password
	.....
	MAIL_USERNAME = os.environ.get('EMAIL_USER') # you have to set the environ variables yourself
	MAIL_PASSWORD = os.environ.get('EMAIL_PASS')
	
	.....

__init__.py
from flaskblog.config import Config 

app = Flask(__name__)
app.config.from_object(Config)
....
#remove the app from the initializations, but keep the lines 
db = SQLAlchemy
...

def create_app(config_class=Config):
	#paste this 
	app = Flask(__name__)
	app.config.from_object(Config) 
	
	db.init_app(app)
	bcrypt.init_app(app)
	login_manager.init_app(app)
	mail.init_app(app)
	
	#also paste the blueprints 6lines

	return app

#in the entire project change the 'app' variable 
#models.py, users/utils, run.py 
#remove the app import to 'from flask import current_app'
#change to current_app 
	
run.py 
from flaskblog import create_app 
app = create_app()

if __name__ == '__main__':
	app.run(debug=True)
	
	
structure now:
flaskblog 
	__init__.py 
	config.py 
	models.py
	site.db 
	main 
		__init__.py 
		routes.py 
	posts 
		__init__.py 
		forms.py 
		routes.py
	users 
		__init.py 
		forms.py 
		routes.py 
		utils.py
	
	static 
		main.css 
		profile_pics 
			default.jpg 
	templates 
		about.html
		account.html
		create_post.html 
		home.html 
		layout.html 
		login.html 
		post.html 
		register.html 
		reset_request.html 
		reset_token.html 
		user_posts.html
	
		
		
		
CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				CONFIGURATION 				
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				
	
#create folder errors 
flaskblog/errors/__init__.py 
error/__init__.py
error/handlers.py 

from flask import Blueprint, render_template 

errors = Blueprint('errors', __name__)
	
@errors.app_errorhandler(404)
def error_404(error):
	return render_template('errors/404.html'), 404

@errors.app_errorhandler(403)
def error_403(error):
	return render_template('errors/403.html'), 403

@errors.app_errorhandler(500)
def error_500(error):
	return render_template('errors/500.html'), 500
	
templates/errors
templates/errors/404.html
{% extends 'layout.html' %}
{% block content %}
	<div class='content-section'>
		<h1>Oops. Page Not Found (404)</h1>
		<p> That page does not exist. Please try a different location</p>
	</div>
{% endblock conten %}

templates/errors/403.html #copy paste and change the messages to, You don't have permission to do that(403)</h1>  Please check you account and try again </p>
templates/errors/500.html #copy paste and change the messages to, Something went wrong (500)</h1> We're experiencing some trouble on our end. Please try again in the near future </p>	
	
flaskblog/init_.py
....
def create_app():
	..
	from flaskblog.errors.handlers import errors
	app.register_blueprint(errors)
	..
	
	
	
ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				ERROR PAGES 				
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		