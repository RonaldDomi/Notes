from flask_sqlalchemy import SQLAlchemy
pip install flask-sqlalchemy

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
db = SQLAlchemy(app)
	
	
class User(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    username = db.Column(db.String(20), nullable=False, unique=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default='default.jpg')
    password = db.Column(db.String(60), nullable=False)
    posts = db.relationship('Post', backref='author', lazy=True)
	#this is not a column, Post is the actual class, backref is what we will call it

    def __repr__(self):
        return f"User('{self.username}'), ('{self.email}'), ('{self.image_file}')"

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)				#from datetime import datetime
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)					#a foreign key needs the name of the table, lowercase
    
    def __repr__(self):
        return f"User('{self.title}'), ('{self.date_posted}')"
		

>>CONSOLE
from flaskblog import db 
db.create_all()          

from flaskblog import User, Post        	#the classes 
user_1 = User(username='John', email='JohnDoe@example.com', password='password')
user_2 = User(username='John2', email='JohnDoe2@example.com', password='password2')
db.session.add(user_1) 						#cannot add all as in git, now in staged area 
db.session.commit() 						#commited area,
User.query.all()							#return a list with all the 'users'
User.query.get(1) 							#1 is the id, the primary key
User.query.first()							#return only the first instance created
User.query.filter_by(username='John').all()	#return the list with all the filtered users 
user = User.query.filter_by(username='John').first()
print user                            		#prints the instance 

print user.posts  >> []						#user has no posts linked with it
print user.id 	  >> 1
post_1 = Post(title='Blog 1', content='First Post Content!', user_id=user.id)
post_2 = Post(title='Blog 2', content='Second Post Content!', user_id=user.id)
db.session.add(post_1)
db.session.add(post_2)
db.session.commit()
user.posts 		  >> #list with the posts that has: a title, dateposted like we specified in the __repr__ method 
post = Post.query.first()					#it has the first post created 
post.user_id  	  >>1 						#user_id has been linked as a foreign key 
post.author       >>User('John', 'JohnDoe@example', 'default.jpg')    author as a backref is the user, 
	
	
db.drop_all()								#deletes all THIS SHIT 
db.create_all()
User.query.all()  >> []
Post.query.all()  >> []

