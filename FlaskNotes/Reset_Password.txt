
>> from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
>> s = Serializer('secret', 30)
>> token = s.dumbs({'user_id': 1}).decode('utf-8')
>> s.loads(token)  #needs to be under 30 of calling, if you wait more than 30 it will expire

pip install flask_mail

models.py
from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
from flaskblog import db, login_manager, app 

class User(db.Model, UserMixin):
	....
	
	def get_reset_token(self, expires_sec=1800):  #30min 
		s = Serializer(app.config['SECRET_KEY'], expires_sec)
		return s.dumps({'user_id': self.id }).decode('utf-8')
	
	@staticmethod
	def verify_reset_token(token):
		s = Serializer(app.config['SECRET_KEY'])
		try:
			user_id = s.loads(token)['user_id']
		except:
			return None
		return User.query.get(user_id)
	...
	
form.py
	
class RequestResetForm(FlaskForm):
	email = StringField('Email', validators = [DataRequired(), Email()])
	submit = SubmitField('Request Password Reset')
	
	def validate_email(self, email):
		user = User.query.filter_by(email=email.data).first()
		if user is None:
			raise ValidationError('There is no account with that email. You must register first.')

class ResetPasswordForm(FlaskForm):
	password = PasswordField('Password', validators=[DataRequired()])
	confirm_password = PasswordField('Password', validators=[DataRequired(), EqualTo('password')])
	submit = SubmitField('Password Reset')


routes.py 
from flaskblog.form import RequestResetForm, ResetPasswordForm 
....


@app.route('/reset_password', methods=['GET', 'POST'])
def reset_request():
	if current_user.is_authenticated:
		return redirect(url_for('home'))
	form = RequestResetForm() 
	return render_template('reset_request.html', title='Reset Password', form=form)
	
	
reset_request.html 
#copy paste login 
#legend to Reset Password 
#rid of password,  keep submit button, 
#remove text of 'forgot password', 
#rid of need password 
#rid of form_check remember,
	
	
routes.py 
....

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_token(token):
	if current_user.is_authenticated:
		return redirect(url_for('home'))
	user = User.verify_reset_token(token)
	if user is None:
		flash('That is an invalid or expired token', 'warning')
		return redirect(url_for('reset_request'))
	form = ResetPasswordForm()
	return render_template('reset_token.html', title='Reset Password', form=form)
	
	
reset_token.html 
#copy paster reset_request.html 
#replace email with password and create a new confirm_password group 


routes.py 
...

def send_reset_email(user):
	pass

def reset_request():
	...
	form = ..
	if form.validate_on_submit():
		user = User.query.filter_by(email=form.email.data).first()
		send_reset_email(user)
		flash('An email has been sent with instructions to reset your password.', 'info')
		return redirect(url_for('login'))
	return render_template('reset_request.html', ....)
	
	
__init__.py 
from flask_mail import Mail 
...

app.config['MAIL_SERVER'] = 'smtp.googlemail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True 
app.config['MAIL_USERNAME'] = 'name@gmail.com'
app.config['MAIL_PASSWORD'] = 'password' #change these
mail = Mail(app)
	
routes.py 
from flaskblog import .., mail
from flask_mail import Message 
..... 
	
def send_reset_email(user):
	token = user.get_reset_token()#default kicks in 
	msg = Message('Password Reset Request', sender = 'noreply@demo.com', recipients=[user.email])   #usually email from your domain or your actual email address
	#multi line string 
	
	msg.body = f'''  To reset your password, visit the following link: 
url_for('reset_token', token=token, _external=True)}  
		
If you did not make this request then sumply ignore this email and no changes will be made.
'''
	mail.send(msg)
	
def reset_token(token):
	...
	form = ResetPasswordForm()
	if form.validate_on_submit():
		hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
		user.password = hashed_password 
		db.session.commit()
		flash('Password has been updated.', 'success')
		return redirect(url_for('login'))
	return render_template('reset_token.html'....)
	

login.html 
...
<div class='form-group'>
	{{ form.submit(....
	<small class='text-muted ml-2'>
		<a href=' {{url_for('reset_request') }}>Forgot Password? </a>
	</small>
</div>
</form>
.....