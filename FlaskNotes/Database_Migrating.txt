Usually after updating the models.py we delete the previous database and than create it new.
This is time consuming and not a good practice, here enters migration.
Instead of deleteing we just upgrade the database

pip install flask-migrate

So let's create the migration repository  by running 
>>flask db init

Remember that the flask command relies on the FLASK_APP environment variable to know where the Flask application lives. 
For this application, you want to set FLASK_APP=microblog.py

Since there is no previous database, the automatic migration will add the entire User model to the migration script. 
The flask db migrate sub-command generates these automatic migrations:
>>flask db migrate

The generated migration script is now part of your project, and needs to be incorporated to source control. 
You are welcome to inspect the script if you are curious to see how it looks. 
You will find that it has two functions called upgrade() and downgrade(). 
The upgrade() function applies the migration, and the downgrade() function removes it. 
This allows Alembic to migrate the database to any point in the history, even to older versions, by using the downgrade path.

The flask db migrate command does not make any changes to the database, it just generates the migration script. 
To apply the changes to the database, the flask db upgrade command must be used.

>>flask db upgrade

Because this application uses SQLite, the upgrade command will detect that a database does not exist 
and will create it (you will notice a file named app.db is added after this command finishes, that is the SQLite database). 
When working with database servers such as MySQL and PostgreSQL, you have to create the database 
in the database server before running upgrade.